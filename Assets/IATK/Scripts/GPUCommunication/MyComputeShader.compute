// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel ComputeBrushedIndicesArray
#include "UnityCG.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 W_Matrix;
float rand;

float _size;

//*******************
// RANGE FILTERING
//*******************

float _MinX;
float _MaxX;
float _MinY;
float _MaxY;
float _MinZ;
float _MaxZ;

// ********************
// Normalisation ranges
// ********************

float _MinNormX;
float _MaxNormX;
float _MinNormY;
float _MaxNormY;
float _MinNormZ;
float _MaxNormZ;

float3 pointer1;
float3 pointer2;

float width;
float height;
float depth;

float RadiusSphere;

int BrushMode;
int SelectionMode;

// Overlap box brushing
float3 OverlapBoxHalfExtents;
float4x4 OverlapBoxWorldToLocalMatrix;

// Sceen-space cube brushing
float4x4 LocalToWorldMatrix;
float4x4 WorldToClipMatrix;

bool HasFreeBrushReset;

RWStructuredBuffer<float3> dataBuffer;
StructuredBuffer<float> filteredIndicesBuffer;
RWStructuredBuffer<int> brushedIndicesBuffer;

bool Brush2DInCircle(float3 center, float radius, float4 testPoint)
{
	float4 projectedCenter = mul(W_Matrix, float4(center, 1.0));

	return sqrt(pow(testPoint.x - projectedCenter.x, 2) + pow(testPoint.y - projectedCenter.y, 2)) < radius;
}

bool BrushSphere(float3 center, float radius, float3 testPoint)
{
	float3 displacementToCenter = testPoint - center;
	float radiusSqr = radius * radius;
	bool intersects = dot(displacementToCenter, displacementToCenter) < radiusSqr;

	return intersects;
}

bool BrushSquare(float3 tl, float3 tr, float3 bl, float3 br, float4 testPoint)
{
	float4 tlp = mul(W_Matrix, float4(tl, 1.0));
	float4 trp = mul(W_Matrix, float4(tr, 1.0));
	float4 blp = mul(W_Matrix, float4(bl, 1.0));
	float4 brp = mul(W_Matrix, float4(br, 1.0));

	return (testPoint.x >= tlp.x && testPoint.x <= trp.x
		&&  testPoint.y <= tlp.y && testPoint.x >= blp.y);
}

bool BrushCube(float3 TFL, float3 BBR, float3 testPoint)
{
	return (testPoint.x >= TFL.x && testPoint.x <= BBR.x
		&&  testPoint.y <= TFL.y && testPoint.y >= BBR.y
		&&  testPoint.z >= TFL.z && testPoint.z <= BBR.z);
}

bool BrushSquare(float2 TL, float2 BR, float2 testPoint)
{
	return (testPoint.x >= TL.x && testPoint.x <= BR.x
		&&  testPoint.y <= TL.y && testPoint.y >= BR.y);
}

float3 MultiplyPoint(float4x4 m, float3 v)
{
	float3 vector3;
	vector3.x =  ( m[0][0] *  v.x +  m[0][1] *  v.y +  m[0][2] *  v.z) + m[0][3];
	vector3.y =  ( m[1][0] *  v.x +  m[1][1] *  v.y +  m[1][2] *  v.z) + m[1][3];
	vector3.z =  ( m[2][0] *  v.x +  m[2][1] *  v.y +  m[2][2] *  v.z) + m[2][3];
	float num = 1.0 / ( ( m[3][0] *  v.x +  m[3][1] *  v.y +  m[3][2] *  v.z) + m[3][3]);
	vector3.x *= num;
	vector3.y *= num;
	vector3.z *= num;
	return vector3;
}

// Selects the correct brush type based on the set brush mode
bool Brush(int brushType, float3 filteredPosition)
{
	switch (brushType)
	{
		// Sphere brushing
		case 0:
			return BrushSphere(float3(pointer1.x, pointer1.y, pointer1.z), RadiusSphere, filteredPosition);

		// Cube brushing
		case 1:
		{
			float3 TFL;
			float3 BBR;

			TFL.x = min(pointer1.x, pointer2.x);
			BBR.x = max(pointer1.x, pointer2.x);
			TFL.y = max(pointer1.y, pointer2.y);
			BBR.y = min(pointer1.y, pointer2.y);
			TFL.z = min(pointer1.z, pointer2.z);
			BBR.z = max(pointer1.z, pointer2.z);

			return BrushCube(TFL, BBR, filteredPosition);
		}

		// Square brushing based on screen space
		case 2:
		{
			float3 TFL = float3(pointer1.x, pointer1.y, pointer1.z);
			float3 BBR = float3(pointer2.x, pointer2.y, pointer2.z);
			float3 pos = float3(filteredPosition.x, filteredPosition.y, filteredPosition.z);

			// Convert points from local to world space
			// We have to use this MultiplyPoint function instead of mul() because mul doesn't want to work with translations...
			TFL = MultiplyPoint(LocalToWorldMatrix, TFL);
			BBR = MultiplyPoint(LocalToWorldMatrix, BBR);
			pos = MultiplyPoint(LocalToWorldMatrix, pos);

			// Convert from world to screen space based on camera's matrix
			TFL = MultiplyPoint(WorldToClipMatrix, TFL);
			BBR = MultiplyPoint(WorldToClipMatrix, BBR);
			pos = MultiplyPoint(WorldToClipMatrix, pos);

			// Determine the top left and bottom right corners
			float2 TL;
			float2 BR;
			TL.x = min(TFL.x, BBR.x);
			BR.x = max(TFL.x, BBR.x);
			TL.y = max(TFL.y, BBR.y);
			BR.y = min(TFL.y, BBR.y);

			return BrushSquare(TL, BR, float2(pos.x, pos.y));
		}

		// Boxcast brushing based on the given extents and rotation of pointer1
		case 3:
		{
			// // Get corners of the overlap box in local space
			float3 TFL = float3(-OverlapBoxHalfExtents.x, OverlapBoxHalfExtents.y, -OverlapBoxHalfExtents.z);
			float3 BBR = float3(OverlapBoxHalfExtents.x, -OverlapBoxHalfExtents.y, OverlapBoxHalfExtents.z);

			// Convert the data point position into the local space of the overlap box pointer
			float3 worldPoint = MultiplyPoint(LocalToWorldMatrix, filteredPosition);
			float3 localPoint = MultiplyPoint(OverlapBoxWorldToLocalMatrix, worldPoint);

			return BrushCube(TFL, BBR, localPoint);
		}

		default:
			return false;
	}
}

// TODO
// brush sphere
//brush rectangle
//brush cube
//texturebrush
// brush histogram

//*********************************
// helper functions
//*********************************

// Handles situations where the upper range value is less than the lower range value, specifically when handling negative ranges
bool IsBetweenRanges(float value, float lower, float upper)
{
	if (lower <= upper)
	{
		return (lower <= value && value <= upper);
	}
	else
	{
		return (upper <= value && value <= lower);
	}
}

float NormaliseValue(float value, float i0, float i1, float j0, float j1)
{
	float L = (j0 - j1) / (i0 - i1);
	return (j0 - (L * i0) + (L * value));
}

[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	int idx = id.x + id.y * _size;

	// Ignore indices that are filtered
	if (!filteredIndicesBuffer[idx])
	{
		float3 filteredPosition = float3(
			NormaliseValue(dataBuffer[idx].x, _MinNormX, _MaxNormX, 0, width),
			NormaliseValue(dataBuffer[idx].y, _MinNormY, _MaxNormY, 0, height),
			NormaliseValue(dataBuffer[idx].z, _MinNormZ, _MaxNormZ, 0, depth));

		#if UNITY_EDITOR
		if (IsBetweenRanges(filteredPosition.x, _MinX, _MaxX * width) &&
			IsBetweenRanges(filteredPosition.y, _MinY, _MaxY * height) &&
			IsBetweenRanges(filteredPosition.z, _MinZ, _MaxZ * depth)
		)
		#else
		// Filter out indices
		if (
			(filteredPosition.x >= _MinX &&
				filteredPosition.x <= _MaxX * width &&
				filteredPosition.y >= _MinY &&
				filteredPosition.y <= _MaxY * height &&
				filteredPosition.z >= _MinZ &&
				filteredPosition.z <= _MaxZ * depth
				))
		#endif
		{
			if (Brush(BrushMode, filteredPosition))
			{
				switch (SelectionMode) {
					// Free selection
					case 0:
					// Additive selection
					case 1:
						Result[id.xy] = float4(1.0, 0.0, 0.0, 1.0);  // brushed
						break;

					// Subtractive selection
					case 2:
					default:
						Result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);  // not brushed
						break;
				}
			}
			// Free selection un-brushes points
			else if (SelectionMode == 0 && !HasFreeBrushReset)
			{
				Result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);  // not brushed
			}
		}
		else
		{
			Result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);  // not brushed
		}
	}
}

[numthreads(64, 1, 1)]
void ComputeBrushedIndicesArray(uint3 id : SV_DispatchThreadID)
{
	int x = id.x % _size;
	int y = floor(id.x / _size);
	float2 pos = float2(x, y);

	if (Result[pos].x > 0.0)
		brushedIndicesBuffer[id.x] = 1;
	else
		brushedIndicesBuffer[id.x] = -1;
}