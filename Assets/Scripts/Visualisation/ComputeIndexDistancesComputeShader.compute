// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeDistancesArray

float _MinX;
float _MaxX;
float _MinY;
float _MaxY;
float _MinZ;
float _MaxZ;
float _MinNormX;
float _MaxNormX;
float _MinNormY;
float _MaxNormY;
float _MinNormZ;
float _MaxNormZ;
float width;
float height;
float depth;

float3 pointer;
StructuredBuffer<float3> dataBuffer;
StructuredBuffer<float> filteredIndicesBuffer;
RWStructuredBuffer<float> distancesBuffer;

//*********************************
// Helper Functions
//*********************************

// Handles situations where the upper range value is less than the lower range value, specifically when handling negative ranges
bool IsBetweenRanges(float value, float lower, float upper)
{
	if (lower <= upper)
	{
		return (lower <= value && value <= upper);
	}
	else
	{
		return (upper <= value && value <= lower);
	}
}

float NormaliseValue(float value, float i0, float i1, float j0, float j1)
{
	float L = (j0 - j1) / (i0 - i1);
	return (j0 - (L * i0) + (L * value));
}


//*********************************
// Kernels
//*********************************

[numthreads(64, 1, 1)]
void ComputeDistancesArray(uint3 id: SV_DispatchThreadID) {

	int idx = id.x;

	// Only compute distance if the point is not filtered
	if (!filteredIndicesBuffer[idx]) {
		float3 filteredPosition = float3(
			NormaliseValue(dataBuffer[idx].x, _MinNormX, _MaxNormX, 0, width),
			NormaliseValue(dataBuffer[idx].y, _MinNormY, _MaxNormY, 0, height),
			NormaliseValue(dataBuffer[idx].z, _MinNormZ, _MaxNormZ, 0, depth));

        float3 displacementToCenter = filteredPosition - float3(pointer.x, pointer.y, pointer.z);
        float magnitudeSqr = dot(displacementToCenter, displacementToCenter);
        distancesBuffer[id.x] = sqrt(magnitudeSqr);
	}
	else
    {
		distancesBuffer[id.x] = -1;
	}
}